Answer to questions:
1.
The network is still secure. 
When sending data through ssh, the message will first be encrypted by client's public key, which everyone can see, but only with client's private key one can decrypt the message.
However, the network flow will not tell other teams what the private key is, so they cannot pass through the authentication phase. 
(1)
The network is secure. With the keystroke, they could analyze which part is my paraphrase for the private key. 
However, the private key is randomly generated by the computer, so my paraphrase cannot help them decrypt the private key, which is stored in my local server. 
(2)
The network is not secure. If they have the access of USB, they have the access to all files in the server, including the encrypted private and public key for the client.
So they can pass through the private-key authentication easily.

2.
gpg --verify does not verify the original creator of the file. All it does is to use public key to decrypt data and compare if it matched with the signature. 
So if someone else modified the files, and create another set of public and private key, they could still pass the gpg --verify test with their own pair of keys.
One possible solution is to introduce a third party (e.g. well-known organizations/companies) for verification, and they will give certificated signature only to the creator, or the trusted party who modify this file.